@page "/"
@using System.Text.Json
@inject IJSRuntime JSRuntime;

<h1>Hello, Office!</h1>

@if (!_hostInformation.IsInitialized)
{
    <p>Not in Office.</p>
    return;
}

<table class="table">
    <tbody>
    <tr>
        <td>Host</td>
        <td>@_hostInformation.Host</td>
    </tr>
    <tr>
        <td>Platform</td>
        <td>@_hostInformation.Platform</td>
    </tr>
    </tbody>
</table>

<hr/>

<EditForm Model="@_documentMetadata" OnValidSubmit="SaveDocumentMetadata">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group">
        <label>
            Title:
            <InputText id="title" class="form-control" @bind-Value="@_documentMetadata.Title"/>
        </label>
    </div>

    <div class="form-group">
        <label>
            Subject:
            <InputText id="subject" class="form-control" @bind-Value="@_documentMetadata.Subject"/>
        </label>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code
{
    private HostInformation _hostInformation = new HostInformation();
    private DocumentMetadata _documentMetadata = new DocumentMetadata();

    private async Task SaveDocumentMetadata()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("wordWrapper.saveDocumentMetadata", _documentMetadata);
        }
        catch (JSException ex)
        {
            HandleOfficeError(ex);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _hostInformation = await JSRuntime.InvokeAsync<HostInformation>("Office.onReady");
                if (_hostInformation.IsInitialized)
                {
                    _documentMetadata = await JSRuntime.InvokeAsync<DocumentMetadata>("wordWrapper.getDocumentMetadata");
                    StateHasChanged();
                }
            }
            catch (JSException ex)
            {
                HandleOfficeError(ex);
            }
        }
    }

    private void HandleOfficeError(JSException ex)
    {
        var officeError = JsonSerializer.Deserialize<OfficeError>(ex.Message);
        if (officeError != null)
        {
            // log office error information
        }
        else
        {
            // log message with stack trace
        }
    }
}